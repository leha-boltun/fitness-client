/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import {Configuration} from "./configuration";

const BASE_PATH = "".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

var portableFetch: FetchAPI = fetch

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        this.configuration = configuration;
        this.basePath = configuration.basePath || this.basePath;
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface DExer
 */
export interface DExer {
    /**
     * 
     * @type {number}
     * @memberof DExer
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof DExer
     */
    name: string;
}

/**
 * 
 * @export
 * @interface DNextEvent
 */
export interface DNextEvent {
    /**
     * 
     * @type {boolean}
     * @memberof DNextEvent
     */
    canAddWsets: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DNextEvent
     */
    canSetWeight: boolean;
    /**
     * 
     * @type {string}
     * @memberof DNextEvent
     */
    name: string;
}

/**
 * 
 * @export
 * @interface DProg
 */
export interface DProg {
    /**
     * 
     * @type {number}
     * @memberof DProg
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof DProg
     */
    name: string;
}

/**
 * 
 * @export
 * @interface DTimeStampMain
 */
export interface DTimeStampMain {
    /**
     * 
     * @type {string}
     * @memberof DTimeStampMain
     */
    time: string;
    /**
     * 
     * @type {string}
     * @memberof DTimeStampMain
     */
    type: string;
}

/**
 * 
 * @export
 * @interface DUser
 */
export interface DUser {
    /**
     * 
     * @type {number}
     * @memberof DUser
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof DUser
     */
    name: string;
}

/**
 * 
 * @export
 * @interface DUserMain
 */
export interface DUserMain {
    /**
     * 
     * @type {string}
     * @memberof DUserMain
     */
    name: string;
}

/**
 * 
 * @export
 * @interface DWorkout
 */
export interface DWorkout {
    /**
     * 
     * @type {boolean}
     * @memberof DWorkout
     */
    finished: boolean;
    /**
     * 
     * @type {number}
     * @memberof DWorkout
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof DWorkout
     */
    programName: string;
    /**
     * 
     * @type {string}
     * @memberof DWorkout
     */
    wdate: string;
}

/**
 * 
 * @export
 * @interface DWorkoutMain
 */
export interface DWorkoutMain {
    /**
     * 
     * @type {boolean}
     * @memberof DWorkoutMain
     */
    finished: boolean;
    /**
     * 
     * @type {string}
     * @memberof DWorkoutMain
     */
    wdate: string;
    /**
     * 
     * @type {string}
     * @memberof DWorkoutMain
     */
    weight?: string;
}

/**
 * 
 * @export
 * @interface DWset
 */
export interface DWset {
    /**
     * 
     * @type {string}
     * @memberof DWset
     */
    count: string;
    /**
     * 
     * @type {string}
     * @memberof DWset
     */
    weight: string;
}

/**
 * 
 * @export
 * @interface ModelAndView
 */
export interface ModelAndView {
    /**
     * 
     * @type {boolean}
     * @memberof ModelAndView
     */
    empty?: boolean;
    /**
     * 
     * @type {any}
     * @memberof ModelAndView
     */
    model?: any;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ModelAndView
     */
    modelMap?: { [key: string]: any; };
    /**
     * 
     * @type {boolean}
     * @memberof ModelAndView
     */
    reference?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ModelAndView
     */
    status?: ModelAndView.StatusEnum;
    /**
     * 
     * @type {View}
     * @memberof ModelAndView
     */
    view?: View;
    /**
     * 
     * @type {string}
     * @memberof ModelAndView
     */
    viewName?: string;
}

/**
 * @export
 * @namespace ModelAndView
 */
export namespace ModelAndView {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        ACCEPTED = <any> 'ACCEPTED',
        ALREADYREPORTED = <any> 'ALREADY_REPORTED',
        BADGATEWAY = <any> 'BAD_GATEWAY',
        BADREQUEST = <any> 'BAD_REQUEST',
        BANDWIDTHLIMITEXCEEDED = <any> 'BANDWIDTH_LIMIT_EXCEEDED',
        CHECKPOINT = <any> 'CHECKPOINT',
        CONFLICT = <any> 'CONFLICT',
        CONTINUE = <any> 'CONTINUE',
        CREATED = <any> 'CREATED',
        DESTINATIONLOCKED = <any> 'DESTINATION_LOCKED',
        EXPECTATIONFAILED = <any> 'EXPECTATION_FAILED',
        FAILEDDEPENDENCY = <any> 'FAILED_DEPENDENCY',
        FORBIDDEN = <any> 'FORBIDDEN',
        FOUND = <any> 'FOUND',
        GATEWAYTIMEOUT = <any> 'GATEWAY_TIMEOUT',
        GONE = <any> 'GONE',
        HTTPVERSIONNOTSUPPORTED = <any> 'HTTP_VERSION_NOT_SUPPORTED',
        IMUSED = <any> 'IM_USED',
        INSUFFICIENTSPACEONRESOURCE = <any> 'INSUFFICIENT_SPACE_ON_RESOURCE',
        INSUFFICIENTSTORAGE = <any> 'INSUFFICIENT_STORAGE',
        INTERNALSERVERERROR = <any> 'INTERNAL_SERVER_ERROR',
        IAMATEAPOT = <any> 'I_AM_A_TEAPOT',
        LENGTHREQUIRED = <any> 'LENGTH_REQUIRED',
        LOCKED = <any> 'LOCKED',
        LOOPDETECTED = <any> 'LOOP_DETECTED',
        METHODFAILURE = <any> 'METHOD_FAILURE',
        METHODNOTALLOWED = <any> 'METHOD_NOT_ALLOWED',
        MOVEDPERMANENTLY = <any> 'MOVED_PERMANENTLY',
        MOVEDTEMPORARILY = <any> 'MOVED_TEMPORARILY',
        MULTIPLECHOICES = <any> 'MULTIPLE_CHOICES',
        MULTISTATUS = <any> 'MULTI_STATUS',
        NETWORKAUTHENTICATIONREQUIRED = <any> 'NETWORK_AUTHENTICATION_REQUIRED',
        NONAUTHORITATIVEINFORMATION = <any> 'NON_AUTHORITATIVE_INFORMATION',
        NOTACCEPTABLE = <any> 'NOT_ACCEPTABLE',
        NOTEXTENDED = <any> 'NOT_EXTENDED',
        NOTFOUND = <any> 'NOT_FOUND',
        NOTIMPLEMENTED = <any> 'NOT_IMPLEMENTED',
        NOTMODIFIED = <any> 'NOT_MODIFIED',
        NOCONTENT = <any> 'NO_CONTENT',
        OK = <any> 'OK',
        PARTIALCONTENT = <any> 'PARTIAL_CONTENT',
        PAYLOADTOOLARGE = <any> 'PAYLOAD_TOO_LARGE',
        PAYMENTREQUIRED = <any> 'PAYMENT_REQUIRED',
        PERMANENTREDIRECT = <any> 'PERMANENT_REDIRECT',
        PRECONDITIONFAILED = <any> 'PRECONDITION_FAILED',
        PRECONDITIONREQUIRED = <any> 'PRECONDITION_REQUIRED',
        PROCESSING = <any> 'PROCESSING',
        PROXYAUTHENTICATIONREQUIRED = <any> 'PROXY_AUTHENTICATION_REQUIRED',
        REQUESTEDRANGENOTSATISFIABLE = <any> 'REQUESTED_RANGE_NOT_SATISFIABLE',
        REQUESTENTITYTOOLARGE = <any> 'REQUEST_ENTITY_TOO_LARGE',
        REQUESTHEADERFIELDSTOOLARGE = <any> 'REQUEST_HEADER_FIELDS_TOO_LARGE',
        REQUESTTIMEOUT = <any> 'REQUEST_TIMEOUT',
        REQUESTURITOOLONG = <any> 'REQUEST_URI_TOO_LONG',
        RESETCONTENT = <any> 'RESET_CONTENT',
        SEEOTHER = <any> 'SEE_OTHER',
        SERVICEUNAVAILABLE = <any> 'SERVICE_UNAVAILABLE',
        SWITCHINGPROTOCOLS = <any> 'SWITCHING_PROTOCOLS',
        TEMPORARYREDIRECT = <any> 'TEMPORARY_REDIRECT',
        TOOEARLY = <any> 'TOO_EARLY',
        TOOMANYREQUESTS = <any> 'TOO_MANY_REQUESTS',
        UNAUTHORIZED = <any> 'UNAUTHORIZED',
        UNAVAILABLEFORLEGALREASONS = <any> 'UNAVAILABLE_FOR_LEGAL_REASONS',
        UNPROCESSABLEENTITY = <any> 'UNPROCESSABLE_ENTITY',
        UNSUPPORTEDMEDIATYPE = <any> 'UNSUPPORTED_MEDIA_TYPE',
        UPGRADEREQUIRED = <any> 'UPGRADE_REQUIRED',
        URITOOLONG = <any> 'URI_TOO_LONG',
        USEPROXY = <any> 'USE_PROXY',
        VARIANTALSONEGOTIATES = <any> 'VARIANT_ALSO_NEGOTIATES'
    }
}

/**
 * 
 * @export
 * @interface View
 */
export interface View {
    /**
     * 
     * @type {string}
     * @memberof View
     */
    contentType?: string;
}


/**
 * BasicErrorControllerApi - fetch parameter creator
 * @export
 */
export const BasicErrorControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingDELETE(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingHEAD(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'HEAD' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingOPTIONS(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPATCH(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPOST(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPUT(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BasicErrorControllerApi - functional programming interface
 * @export
 */
export const BasicErrorControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingDELETE(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelAndView> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorHtmlUsingDELETE(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelAndView> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorHtmlUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingHEAD(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelAndView> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorHtmlUsingHEAD(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingOPTIONS(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelAndView> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorHtmlUsingOPTIONS(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPATCH(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelAndView> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorHtmlUsingPATCH(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPOST(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelAndView> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorHtmlUsingPOST(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPUT(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelAndView> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorHtmlUsingPUT(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * BasicErrorControllerApi - factory interface
 * @export
 */
export const BasicErrorControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingDELETE(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorHtmlUsingDELETE(options)(fetch, basePath);
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingGET(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorHtmlUsingGET(options)(fetch, basePath);
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingHEAD(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorHtmlUsingHEAD(options)(fetch, basePath);
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingOPTIONS(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorHtmlUsingOPTIONS(options)(fetch, basePath);
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPATCH(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorHtmlUsingPATCH(options)(fetch, basePath);
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPOST(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorHtmlUsingPOST(options)(fetch, basePath);
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPUT(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorHtmlUsingPUT(options)(fetch, basePath);
        },
    };
};

/**
 * BasicErrorControllerApi - object-oriented interface
 * @export
 * @class BasicErrorControllerApi
 * @extends {BaseAPI}
 */
export class BasicErrorControllerApi extends BaseAPI {
    /**
     * 
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorHtmlUsingDELETE(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorHtmlUsingDELETE(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorHtmlUsingGET(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorHtmlUsingGET(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorHtmlUsingHEAD(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorHtmlUsingHEAD(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorHtmlUsingOPTIONS(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorHtmlUsingOPTIONS(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorHtmlUsingPATCH(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorHtmlUsingPATCH(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorHtmlUsingPOST(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorHtmlUsingPOST(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorHtmlUsingPUT(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorHtmlUsingPUT(options)(this.fetch, this.basePath);
    }

}

/**
 * PingApi - fetch parameter creator
 * @export
 */
export const PingApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary ping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/pi/ping`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PingApi - functional programming interface
 * @export
 */
export const PingApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary ping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PingApiFetchParamCreator(configuration).pingUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PingApi - factory interface
 * @export
 */
export const PingApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary ping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingUsingGET(options?: any) {
            return PingApiFp(configuration).pingUsingGET(options)(fetch, basePath);
        },
    };
};

/**
 * PingApi - object-oriented interface
 * @export
 * @class PingApi
 * @extends {BaseAPI}
 */
export class PingApi extends BaseAPI {
    /**
     * 
     * @summary ping
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PingApi
     */
    public pingUsingGET(options?: any) {
        return PingApiFp(this.configuration).pingUsingGET(options)(this.fetch, this.basePath);
    }

}

/**
 * ProgsControllerApi - fetch parameter creator
 * @export
 */
export const ProgsControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getProgs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProgsUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/pi/progs`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProgsControllerApi - functional programming interface
 * @export
 */
export const ProgsControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getProgs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProgsUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<DProg>> {
            const localVarFetchArgs = ProgsControllerApiFetchParamCreator(configuration).getProgsUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ProgsControllerApi - factory interface
 * @export
 */
export const ProgsControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary getProgs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProgsUsingGET(options?: any) {
            return ProgsControllerApiFp(configuration).getProgsUsingGET(options)(fetch, basePath);
        },
    };
};

/**
 * ProgsControllerApi - object-oriented interface
 * @export
 * @class ProgsControllerApi
 * @extends {BaseAPI}
 */
export class ProgsControllerApi extends BaseAPI {
    /**
     * 
     * @summary getProgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgsControllerApi
     */
    public getProgsUsingGET(options?: any) {
        return ProgsControllerApiFp(this.configuration).getProgsUsingGET(options)(this.fetch, this.basePath);
    }

}

/**
 * UserControllerApi - fetch parameter creator
 * @export
 */
export const UserControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getMain
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMainUsingGET(userId: number, options: any = {}): FetchArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getMainUsingGET.');
            }
            const localVarPath = `/pi/user/{userId}/main`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getWorkouts
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkoutsUsingGET(userId: number, options: any = {}): FetchArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getWorkoutsUsingGET.');
            }
            const localVarPath = `/pi/user/{userId}/workouts`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserControllerApi - functional programming interface
 * @export
 */
export const UserControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getMain
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMainUsingGET(userId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DUserMain> {
            const localVarFetchArgs = UserControllerApiFetchParamCreator(configuration).getMainUsingGET(userId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary getWorkouts
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkoutsUsingGET(userId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<DWorkout>> {
            const localVarFetchArgs = UserControllerApiFetchParamCreator(configuration).getWorkoutsUsingGET(userId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * UserControllerApi - factory interface
 * @export
 */
export const UserControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary getMain
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMainUsingGET(userId: number, options?: any) {
            return UserControllerApiFp(configuration).getMainUsingGET(userId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary getWorkouts
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkoutsUsingGET(userId: number, options?: any) {
            return UserControllerApiFp(configuration).getWorkoutsUsingGET(userId, options)(fetch, basePath);
        },
    };
};

/**
 * UserControllerApi - object-oriented interface
 * @export
 * @class UserControllerApi
 * @extends {BaseAPI}
 */
export class UserControllerApi extends BaseAPI {
    /**
     * 
     * @summary getMain
     * @param {number} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getMainUsingGET(userId: number, options?: any) {
        return UserControllerApiFp(this.configuration).getMainUsingGET(userId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary getWorkouts
     * @param {number} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getWorkoutsUsingGET(userId: number, options?: any) {
        return UserControllerApiFp(this.configuration).getWorkoutsUsingGET(userId, options)(this.fetch, this.basePath);
    }

}

/**
 * UsersControllerApi - fetch parameter creator
 * @export
 */
export const UsersControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getUsers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/pi/users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersControllerApi - functional programming interface
 * @export
 */
export const UsersControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getUsers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<DUser>> {
            const localVarFetchArgs = UsersControllerApiFetchParamCreator(configuration).getUsersUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * UsersControllerApi - factory interface
 * @export
 */
export const UsersControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary getUsers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersUsingGET(options?: any) {
            return UsersControllerApiFp(configuration).getUsersUsingGET(options)(fetch, basePath);
        },
    };
};

/**
 * UsersControllerApi - object-oriented interface
 * @export
 * @class UsersControllerApi
 * @extends {BaseAPI}
 */
export class UsersControllerApi extends BaseAPI {
    /**
     * 
     * @summary getUsers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersControllerApi
     */
    public getUsersUsingGET(options?: any) {
        return UsersControllerApiFp(this.configuration).getUsersUsingGET(options)(this.fetch, this.basePath);
    }

}

/**
 * WorkoutControllerApi - fetch parameter creator
 * @export
 */
export const WorkoutControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary create
         * @param {number} progId progId
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST(progId: number, userId: number, options: any = {}): FetchArgs {
            // verify required parameter 'progId' is not null or undefined
            if (progId === null || progId === undefined) {
                throw new RequiredError('progId','Required parameter progId was null or undefined when calling createUsingPOST.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling createUsingPOST.');
            }
            const localVarPath = `/pi/workout/{userId}/{progId}`
                .replace(`{${"progId"}}`, encodeURIComponent(String(progId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getExers
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExersUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getExersUsingGET.');
            }
            const localVarPath = `/pi/workout/{id}/exers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getMain
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMainUsingGET1(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getMainUsingGET1.');
            }
            const localVarPath = `/pi/workout/{id}/main`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getNextEventName
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNextEventNameUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getNextEventNameUsingGET.');
            }
            const localVarPath = `/pi/workout/{id}/next`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getTimestamps
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimestampsUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getTimestampsUsingGET.');
            }
            const localVarPath = `/pi/workout/{id}/timestamps`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary processNextEventSetWeight
         * @param {number} id id
         * @param {string} weight weight
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processNextEventSetWeightUsingPOST(id: number, weight: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling processNextEventSetWeightUsingPOST.');
            }
            // verify required parameter 'weight' is not null or undefined
            if (weight === null || weight === undefined) {
                throw new RequiredError('weight','Required parameter weight was null or undefined when calling processNextEventSetWeightUsingPOST.');
            }
            const localVarPath = `/pi/workout/{id}/nextSetWeight`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(weight || {}) : (weight || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary processNextEvent
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processNextEventUsingPOST(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling processNextEventUsingPOST.');
            }
            const localVarPath = `/pi/workout/{id}/next`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkoutControllerApi - functional programming interface
 * @export
 */
export const WorkoutControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary create
         * @param {number} progId progId
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST(progId: number, userId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DWorkout> {
            const localVarFetchArgs = WorkoutControllerApiFetchParamCreator(configuration).createUsingPOST(progId, userId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary getExers
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExersUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<DExer>> {
            const localVarFetchArgs = WorkoutControllerApiFetchParamCreator(configuration).getExersUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary getMain
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMainUsingGET1(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DWorkoutMain> {
            const localVarFetchArgs = WorkoutControllerApiFetchParamCreator(configuration).getMainUsingGET1(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary getNextEventName
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNextEventNameUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DNextEvent> {
            const localVarFetchArgs = WorkoutControllerApiFetchParamCreator(configuration).getNextEventNameUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary getTimestamps
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimestampsUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<DTimeStampMain>> {
            const localVarFetchArgs = WorkoutControllerApiFetchParamCreator(configuration).getTimestampsUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary processNextEventSetWeight
         * @param {number} id id
         * @param {string} weight weight
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processNextEventSetWeightUsingPOST(id: number, weight: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DNextEvent> {
            const localVarFetchArgs = WorkoutControllerApiFetchParamCreator(configuration).processNextEventSetWeightUsingPOST(id, weight, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary processNextEvent
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processNextEventUsingPOST(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DNextEvent> {
            const localVarFetchArgs = WorkoutControllerApiFetchParamCreator(configuration).processNextEventUsingPOST(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * WorkoutControllerApi - factory interface
 * @export
 */
export const WorkoutControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary create
         * @param {number} progId progId
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST(progId: number, userId: number, options?: any) {
            return WorkoutControllerApiFp(configuration).createUsingPOST(progId, userId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary getExers
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExersUsingGET(id: number, options?: any) {
            return WorkoutControllerApiFp(configuration).getExersUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary getMain
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMainUsingGET1(id: number, options?: any) {
            return WorkoutControllerApiFp(configuration).getMainUsingGET1(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary getNextEventName
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNextEventNameUsingGET(id: number, options?: any) {
            return WorkoutControllerApiFp(configuration).getNextEventNameUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary getTimestamps
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimestampsUsingGET(id: number, options?: any) {
            return WorkoutControllerApiFp(configuration).getTimestampsUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary processNextEventSetWeight
         * @param {number} id id
         * @param {string} weight weight
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processNextEventSetWeightUsingPOST(id: number, weight: string, options?: any) {
            return WorkoutControllerApiFp(configuration).processNextEventSetWeightUsingPOST(id, weight, options)(fetch, basePath);
        },
        /**
         * 
         * @summary processNextEvent
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processNextEventUsingPOST(id: number, options?: any) {
            return WorkoutControllerApiFp(configuration).processNextEventUsingPOST(id, options)(fetch, basePath);
        },
    };
};

/**
 * WorkoutControllerApi - object-oriented interface
 * @export
 * @class WorkoutControllerApi
 * @extends {BaseAPI}
 */
export class WorkoutControllerApi extends BaseAPI {
    /**
     * 
     * @summary create
     * @param {number} progId progId
     * @param {number} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutControllerApi
     */
    public createUsingPOST(progId: number, userId: number, options?: any) {
        return WorkoutControllerApiFp(this.configuration).createUsingPOST(progId, userId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary getExers
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutControllerApi
     */
    public getExersUsingGET(id: number, options?: any) {
        return WorkoutControllerApiFp(this.configuration).getExersUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary getMain
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutControllerApi
     */
    public getMainUsingGET1(id: number, options?: any) {
        return WorkoutControllerApiFp(this.configuration).getMainUsingGET1(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary getNextEventName
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutControllerApi
     */
    public getNextEventNameUsingGET(id: number, options?: any) {
        return WorkoutControllerApiFp(this.configuration).getNextEventNameUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary getTimestamps
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutControllerApi
     */
    public getTimestampsUsingGET(id: number, options?: any) {
        return WorkoutControllerApiFp(this.configuration).getTimestampsUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary processNextEventSetWeight
     * @param {number} id id
     * @param {string} weight weight
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutControllerApi
     */
    public processNextEventSetWeightUsingPOST(id: number, weight: string, options?: any) {
        return WorkoutControllerApiFp(this.configuration).processNextEventSetWeightUsingPOST(id, weight, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary processNextEvent
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutControllerApi
     */
    public processNextEventUsingPOST(id: number, options?: any) {
        return WorkoutControllerApiFp(this.configuration).processNextEventUsingPOST(id, options)(this.fetch, this.basePath);
    }

}

/**
 * WorkoutExerControllerApi - fetch parameter creator
 * @export
 */
export const WorkoutExerControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getWsets
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWsetsUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getWsetsUsingGET.');
            }
            const localVarPath = `/pi/workoutexer/{id}/main`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkoutExerControllerApi - functional programming interface
 * @export
 */
export const WorkoutExerControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getWsets
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWsetsUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<DWset>> {
            const localVarFetchArgs = WorkoutExerControllerApiFetchParamCreator(configuration).getWsetsUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * WorkoutExerControllerApi - factory interface
 * @export
 */
export const WorkoutExerControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary getWsets
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWsetsUsingGET(id: number, options?: any) {
            return WorkoutExerControllerApiFp(configuration).getWsetsUsingGET(id, options)(fetch, basePath);
        },
    };
};

/**
 * WorkoutExerControllerApi - object-oriented interface
 * @export
 * @class WorkoutExerControllerApi
 * @extends {BaseAPI}
 */
export class WorkoutExerControllerApi extends BaseAPI {
    /**
     * 
     * @summary getWsets
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutExerControllerApi
     */
    public getWsetsUsingGET(id: number, options?: any) {
        return WorkoutExerControllerApiFp(this.configuration).getWsetsUsingGET(id, options)(this.fetch, this.basePath);
    }

}

/**
 * WsetControllerApi - fetch parameter creator
 * @export
 */
export const WsetControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary createWset
         * @param {DWset} data data
         * @param {number} workoutExerId workoutExerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWsetUsingPOST(data: DWset, workoutExerId: number, options: any = {}): FetchArgs {
            // verify required parameter 'data' is not null or undefined
            if (data === null || data === undefined) {
                throw new RequiredError('data','Required parameter data was null or undefined when calling createWsetUsingPOST.');
            }
            // verify required parameter 'workoutExerId' is not null or undefined
            if (workoutExerId === null || workoutExerId === undefined) {
                throw new RequiredError('workoutExerId','Required parameter workoutExerId was null or undefined when calling createWsetUsingPOST.');
            }
            const localVarPath = `/pi/wset/{workoutExerId}/create`
                .replace(`{${"workoutExerId"}}`, encodeURIComponent(String(workoutExerId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"DWset" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(data || {}) : (data || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WsetControllerApi - functional programming interface
 * @export
 */
export const WsetControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary createWset
         * @param {DWset} data data
         * @param {number} workoutExerId workoutExerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWsetUsingPOST(data: DWset, workoutExerId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = WsetControllerApiFetchParamCreator(configuration).createWsetUsingPOST(data, workoutExerId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * WsetControllerApi - factory interface
 * @export
 */
export const WsetControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary createWset
         * @param {DWset} data data
         * @param {number} workoutExerId workoutExerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWsetUsingPOST(data: DWset, workoutExerId: number, options?: any) {
            return WsetControllerApiFp(configuration).createWsetUsingPOST(data, workoutExerId, options)(fetch, basePath);
        },
    };
};

/**
 * WsetControllerApi - object-oriented interface
 * @export
 * @class WsetControllerApi
 * @extends {BaseAPI}
 */
export class WsetControllerApi extends BaseAPI {
    /**
     * 
     * @summary createWset
     * @param {DWset} data data
     * @param {number} workoutExerId workoutExerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WsetControllerApi
     */
    public createWsetUsingPOST(data: DWset, workoutExerId: number, options?: any) {
        return WsetControllerApiFp(this.configuration).createWsetUsingPOST(data, workoutExerId, options)(this.fetch, this.basePath);
    }

}

